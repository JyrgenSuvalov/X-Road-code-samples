package org.niis.xrd4j_example_client;

import fi.vrk.xrd4j.client.SOAPClient;
import fi.vrk.xrd4j.client.SOAPClientImpl;
import fi.vrk.xrd4j.client.deserializer.ServiceResponseDeserializer;
import fi.vrk.xrd4j.client.serializer.ServiceRequestSerializer;
import fi.vrk.xrd4j.common.member.ConsumerMember;
import fi.vrk.xrd4j.common.member.ProducerMember;
import fi.vrk.xrd4j.common.message.ServiceRequest;
import fi.vrk.xrd4j.common.message.ServiceResponse;
import fi.vrk.xrd4j.common.util.MessageHelper;
import fi.vrk.xrd4j.common.util.SOAPHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Main {
    private static final Logger logger = LoggerFactory.getLogger(Main.class);
    private static String url = "http://localhost:8080/example-adapter-x.x.x-SNAPSHOT/Endpoint";

    public static void main(String[] args) {
        try {
            // Consumer that is calling a service
            ConsumerMember consumer = new ConsumerMember("NIIS-TEST", "GOV", "1234567-8", "TestSystem");

            // Producer providing the service
            ProducerMember producer = new ProducerMember("NIIS.TEST", "GOV", "9876543-1", "DemoService", "helloService", "v1");
            producer.setNamespacePrefix("ts");
            producer.setNamespaceUrl("http://test.x-road.fi/producer");

            // Create a new ServiceRequest object, unique message id is generated by MessageHelper.
            // Type of the ServiceRequest is the type of the request data (String in this case)
            ServiceRequest<String> request = new ServiceRequest<String>(consumer, producer, MessageHelper.generateId());

            // Set username
            request.setUserId("jdoe");

            // Set message id
            request.setId("12345");

            // Set request data
            request.setRequestData("Test message");

            // Application specific class that serializes request data
            ServiceRequestSerializer serializer = new HelloServiceRequestSerializer();

            // Application specific class that deserializes response data
            ServiceResponseDeserializer deserializer = new HelloServiceResponseDeserializer();

            // Create a new SOAP client
            SOAPClient client = new SOAPClientImpl();

            // Send the ServiceRequest, result is returned as ServiceResponse object
            ServiceResponse<String, String> serviceResponse = client.send(request, url, serializer, deserializer);

            // Print out the SOAP message received as response
            logger.info(SOAPHelper.toString(serviceResponse.getSoapMessage()));

            // Print out only response data. In this case response data is a String.
            logger.info(serviceResponse.getResponseData());
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }
}
